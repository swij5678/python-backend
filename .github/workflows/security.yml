name: Security & Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  push:
    branches: [ main, master ]
    paths:
      - '**/requirements*.txt'
      - '**/pyproject.toml'
      - '**/Dockerfile'
      - '.github/workflows/security.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - '**/requirements*.txt'
      - '**/pyproject.toml'
      - '**/Dockerfile'
  workflow_dispatch:

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        pip install -e .
        
    - name: Run Safety scan
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run pip-audit scan
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        
    - name: Upload Safety report
      uses: actions/upload-artifact@v3
      with:
        name: safety-report
        path: safety-report.json
        
    - name: Upload pip-audit report
      uses: actions/upload-artifact@v3
      with:
        name: pip-audit-report
        path: pip-audit-report.json

  docker-security-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t python-service:security-scan .
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: python-service:security-scan
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Hadolint (Dockerfile linting)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true
        
    - name: Upload Hadolint scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-results.sarif

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  dependency-update:
    name: Automated Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        
    - name: Update dependencies
      run: |
        # Update requirements.txt
        if [ -f requirements.in ]; then
          pip-compile --upgrade requirements.in
        fi
        
        # Update dev requirements
        if [ -f requirements-dev.in ]; then
          pip-compile --upgrade requirements-dev.in
        fi
        
        # Check for updates in pyproject.toml dependencies
        pip install --dry-run --upgrade $(grep -E '^[a-zA-Z0-9]' requirements.txt | cut -d'=' -f1) > update-check.txt || true
        
    - name: Check for changes
      id: changes
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          git diff --name-only
        else
          echo "changes=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Pull Request
      if: steps.changes.outputs.changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'chore: automated dependency updates'
        body: |
          ## Automated Dependency Updates
          
          This PR contains automated updates to project dependencies.
          
          ### Changes
          - Updated Python dependencies to latest compatible versions
          - Security patches included where applicable
          
          ### Testing
          - [ ] CI pipeline passes
          - [ ] Manual testing completed
          - [ ] Security scan results reviewed
          
          **Note**: This PR was automatically created by the dependency update workflow.
        branch: chore/dependency-updates
        delete-branch: true
        labels: |
          dependencies
          automated-pr
          security

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install -e .
        
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        
        # Check for prohibited licenses
        PROHIBITED_LICENSES="GPL-3.0 AGPL-3.0 LGPL-3.0"
        for license in $PROHIBITED_LICENSES; do
          if grep -q "$license" licenses.json; then
            echo "‚ùå Prohibited license found: $license"
            exit 1
          fi
        done
        
        echo "‚úÖ All licenses are compliant"
        
    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json

  security-policy:
    name: Security Policy Enforcement
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for security policy compliance
      run: |
        echo "Checking security policy compliance..."
        
        # Check for presence of SECURITY.md
        if [ ! -f SECURITY.md ]; then
          echo "‚ö†Ô∏è SECURITY.md file is missing"
        fi
        
        # Check for secrets in code
        if grep -r -E "(password|secret|key|token).*=" --include="*.py" --include="*.js" --include="*.ts" src/ 2>/dev/null; then
          echo "‚ö†Ô∏è Potential hardcoded secrets detected"
          echo "Please review and ensure no sensitive information is committed"
        fi
        
        # Check for proper error handling
        if ! grep -r "except" --include="*.py" src/ >/dev/null 2>&1; then
          echo "‚ö†Ô∏è No exception handling found in Python code"
        fi
        
        echo "‚úÖ Security policy checks completed"

  notify-security-issues:
    name: Notify Security Issues
    runs-on: ubuntu-latest
    needs: [dependency-scan, docker-security-scan, secret-scan, license-compliance]
    if: failure() && github.event_name == 'schedule'
    
    steps:
    - name: Create security issue
      uses: actions/github-script@v6
      with:
        script: |
          const title = `üîí Security Scan Issues Detected - ${new Date().toISOString().split('T')[0]}`;
          const body = `## Security Scan Results
          
          Automated security scans have detected potential issues that require attention.
          
          ### Failed Checks
          - Dependency scan: ${{ needs.dependency-scan.result }}
          - Docker security scan: ${{ needs.docker-security-scan.result }}  
          - Secret scan: ${{ needs.secret-scan.result }}
          - License compliance: ${{ needs.license-compliance.result }}
          
          ### Action Items
          - [ ] Review dependency vulnerabilities
          - [ ] Check Docker image security issues
          - [ ] Investigate secret detection alerts
          - [ ] Resolve license compliance issues
          
          ### Resources
          - [Security Action Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Security Policy](https://github.com/${{ github.repository }}/blob/main/SECURITY.md)
          
          **Priority**: High
          **Auto-created**: ${new Date().toISOString()}`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'high-priority', 'automated']
          });
