name: Branch Protection & Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches-ignore: [ main, master ]
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:
    inputs:
      action:
        description: 'Maintenance action to perform'
        required: true
        type: choice
        options:
          - cleanup-branches
          - update-branch-protection
          - sync-forks
          - check-stale-issues

jobs:
  branch-protection-check:
    name: Verify Branch Protection Rules
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'
    
    steps:
    - name: Check branch protection rules
      uses: actions/github-script@v6
      with:
        script: |
          const { data: protection } = await github.rest.repos.getBranchProtection({
            owner: context.repo.owner,
            repo: context.repo.repo,
            branch: 'main'
          }).catch(() => ({ data: null }));
          
          if (!protection) {
            core.setFailed('‚ùå No branch protection rules found for main branch');
            return;
          }
          
          const issues = [];
          
          // Check required status checks
          if (!protection.required_status_checks || !protection.required_status_checks.contexts.length) {
            issues.push('No required status checks configured');
          }
          
          // Check required reviews
          if (!protection.required_pull_request_reviews) {
            issues.push('No required pull request reviews configured');
          } else {
            if (protection.required_pull_request_reviews.required_approving_review_count < 1) {
              issues.push('At least 1 approving review should be required');
            }
          }
          
          // Check admin enforcement
          if (!protection.enforce_admins.enabled) {
            issues.push('Admin enforcement should be enabled');
          }
          
          // Check linear history
          if (!protection.required_linear_history.enabled) {
            issues.push('Linear history should be enforced');
          }
          
          if (issues.length > 0) {
            console.log('‚ö†Ô∏è  Branch protection issues found:');
            issues.forEach(issue => console.log(`  - ${issue}`));
          } else {
            console.log('‚úÖ Branch protection rules are properly configured');
          }

  enforce-pr-conventions:
    name: Enforce PR Conventions
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Check PR title format
      uses: actions/github-script@v6
      with:
        script: |
          const prTitle = context.payload.pull_request.title;
          const validPrefixes = ['feat', 'fix', 'docs', 'style', 'refactor', 'test', 'chore', 'ci', 'perf'];
          const titleRegex = /^(feat|fix|docs|style|refactor|test|chore|ci|perf)(\(.+\))?: .{1,50}/;
          
          if (!titleRegex.test(prTitle)) {
            const comment = `‚ùå **PR Title Format Issue**
            
            Your PR title doesn't follow our convention. Please use:
            \`type(scope): description\`
            
            **Valid types:** ${validPrefixes.join(', ')}
            **Example:** \`feat(api): add user authentication endpoint\`
            
            **Current title:** \`${prTitle}\``;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });
            
            core.setFailed('PR title does not follow conventional format');
          }
          
    - name: Check PR size
      uses: actions/github-script@v6
      with:
        script: |
          const pr = context.payload.pull_request;
          const additions = pr.additions;
          const deletions = pr.deletions;
          const totalChanges = additions + deletions;
          
          if (totalChanges > 500) {
            const comment = `‚ö†Ô∏è **Large PR Detected**
            
            This PR has ${totalChanges} line changes (${additions} additions, ${deletions} deletions).
            
            Consider:
            - Breaking this into smaller PRs
            - Providing detailed description of changes
            - Adding comprehensive tests
            - Scheduling a code review session`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });
          }

  cleanup-branches:
    name: Cleanup Stale Branches
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.action == 'cleanup-branches'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Find and delete stale branches
      run: |
        echo "üßπ Cleaning up stale branches..."
        
        # Find branches older than 30 days with no recent activity
        CUTOFF_DATE=$(date -d "30 days ago" +%Y-%m-%d)
        
        # Get all remote branches except main/master and develop
        git branch -r --format="%(refname:short)" | \
          grep -v -E "(origin/main|origin/master|origin/develop|origin/HEAD)" | \
          while IFS= read -r branch; do
            BRANCH_NAME=${branch#origin/}
            LAST_COMMIT_DATE=$(git log -1 --format="%ci" "$branch" 2>/dev/null | cut -d' ' -f1)
            
            if [[ "$LAST_COMMIT_DATE" < "$CUTOFF_DATE" ]]; then
              echo "Deleting stale branch: $BRANCH_NAME (last commit: $LAST_COMMIT_DATE)"
              git push origin --delete "$BRANCH_NAME" || echo "Failed to delete $BRANCH_NAME"
            fi
          done

  check-stale-issues:
    name: Mark Stale Issues & PRs
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.action == 'check-stale-issues'
    
    steps:
    - name: Mark stale issues and pull requests
      uses: actions/stale@v8
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        stale-issue-message: |
          This issue has been automatically marked as stale because it has not had recent activity.
          It will be closed if no further activity occurs within 7 days.
          If this is still relevant, please add a comment to keep it open.
        stale-pr-message: |
          This pull request has been automatically marked as stale because it has not had recent activity.
          It will be closed if no further activity occurs within 7 days.
          If this is still relevant, please add a comment or push new commits to keep it open.
        close-issue-message: |
          This issue was automatically closed because it was marked as stale and received no further activity.
          If you believe this issue is still relevant, please reopen it with additional context.
        close-pr-message: |
          This pull request was automatically closed because it was marked as stale and received no further activity.
          If this is still relevant, please reopen it or create a new pull request.
        stale-issue-label: 'stale'
        stale-pr-label: 'stale'
        days-before-stale: 60
        days-before-close: 7
        exempt-issue-labels: 'pinned,security,bug'
        exempt-pr-labels: 'pinned,security,work-in-progress'

  update-branch-protection:
    name: Update Branch Protection Rules
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'update-branch-protection'
    permissions:
      contents: write
      pull-requests: write
      actions: write
    
    steps:
    - name: Update branch protection for main
      uses: actions/github-script@v6
      with:
        script: |
          // Note: This requires admin permissions on the repository
          // The GitHub token must have sufficient privileges to modify branch protection
          const protection = {
            required_status_checks: {
              strict: true,
              contexts: [
                'Code Quality Checks',
                'Test Suite (3.11)',
                'Security Scan',
                'Docker Build & Test'
              ]
            },
            enforce_admins: true,
            required_pull_request_reviews: {
              required_approving_review_count: 1,
              dismiss_stale_reviews: true,
              require_code_owner_reviews: false,
              restrict_pushes: true
            },
            restrictions: null,
            required_linear_history: true,
            allow_force_pushes: false,
            allow_deletions: false
          };
          
          try {
            await github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'main',
              ...protection
            });
            console.log('‚úÖ Successfully updated branch protection rules for main');
          } catch (error) {
            console.error('‚ùå Failed to update branch protection:', error.message);
            core.setFailed(error.message);
          }

  sync-forks:
    name: Sync Fork Repositories
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'sync-forks'
    
    steps:
    - name: Find and sync forks
      uses: actions/github-script@v6
      with:
        script: |
          // Get all forks of the repository
          const { data: forks } = await github.rest.repos.listForks({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sort: 'newest'
          });
          
          console.log(`Found ${forks.length} forks to potentially sync`);
          
          // For each fork, check if it's behind and create sync PR if needed
          for (const fork of forks) {
            if (fork.private || fork.archived) {
              console.log(`Skipping ${fork.full_name} (private or archived)`);
              continue;
            }
            
            try {
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner: fork.owner.login,
                repo: fork.name,
                base: fork.default_branch,
                head: `${context.repo.owner}:main`
              });
              
              if (comparison.behind_by > 0) {
                console.log(`${fork.full_name} is ${comparison.behind_by} commits behind`);
                // Note: Actual sync would require fork owner's permission
                // This is just for monitoring purposes
              } else {
                console.log(`${fork.full_name} is up to date`);
              }
            } catch (error) {
              console.log(`Could not compare ${fork.full_name}: ${error.message}`);
            }
          }

  repository-health-check:
    name: Repository Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check repository health
      uses: actions/github-script@v6
      with:
        script: |
          const { data: repo } = await github.rest.repos.get({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const healthChecks = [];
          
          // Check if description is present
          if (!repo.description) {
            healthChecks.push('‚ùå Repository description is missing');
          } else {
            healthChecks.push('‚úÖ Repository description is present');
          }
          
          // Check if topics are set
          if (!repo.topics || repo.topics.length === 0) {
            healthChecks.push('‚ùå Repository topics are missing');
          } else {
            healthChecks.push(`‚úÖ Repository has ${repo.topics.length} topics`);
          }
          
          // Check if README exists
          try {
            await github.rest.repos.getReadme({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            healthChecks.push('‚úÖ README file exists');
          } catch {
            healthChecks.push('‚ùå README file is missing');
          }
          
          // Check if LICENSE exists
          try {
            await github.rest.licenses.getForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            healthChecks.push('‚úÖ LICENSE file exists');
          } catch {
            healthChecks.push('‚ùå LICENSE file is missing');
          }
          
          console.log('Repository Health Report:');
          healthChecks.forEach(check => console.log(check));
          
          // Create issue if there are problems
          const issues = healthChecks.filter(check => check.startsWith('‚ùå'));
          if (issues.length > 0) {
            const body = `## Repository Health Check Report
            
            Some issues were found that could improve the repository:
            
            ${issues.map(issue => `- ${issue}`).join('\n')}
            
            ### Recommendations:
            - Add a clear repository description
            - Set relevant topics for discoverability
            - Ensure README and LICENSE files are present
            
            This issue was automatically created by the maintenance workflow.`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Repository Health Check Issues',
              body: body,
              labels: ['maintenance', 'repository-health']
            });
          }
