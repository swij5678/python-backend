name: Release Management

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

jobs:
  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.changes.outputs.should-release }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check for significant changes
      id: changes
      run: |
        # Check if there are changes since the last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
        else
          CHANGES=$(git diff --name-only $LAST_TAG..HEAD | grep -v -E '^(README\.md|docs/|LICENSE|\.md$)' | wc -l)
          if [ $CHANGES -gt 0 ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: Set up Python
      if: steps.changes.outputs.should-release == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install bump2version
      if: steps.changes.outputs.should-release == 'true'
      run: pip install bump2version
      
    - name: Get current version
      if: steps.changes.outputs.should-release == 'true'
      id: version
      run: |
        CURRENT_VERSION=$(grep -o 'version = "[^"]*"' pyproject.toml | cut -d'"' -f2)
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-release == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      
    outputs:
      new-version: ${{ steps.bump.outputs.new-version }}
      release-url: ${{ steps.create-release.outputs.html_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install bump2version
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Determine release type
      id: release-type
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
        else
          # Auto-determine release type based on commit messages
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            COMMITS=$(git log $LAST_TAG..HEAD --oneline)
            if echo "$COMMITS" | grep -i "BREAKING CHANGE\|breaking:" >/dev/null; then
              echo "type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -i "feat\|feature:" >/dev/null; then
              echo "type=minor" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi
        fi
        
    - name: Bump version
      id: bump
      run: |
        RELEASE_TYPE=${{ steps.release-type.outputs.type }}
        bump2version --current-version $(grep -o 'version = "[^"]*"' pyproject.toml | cut -d'"' -f2) $RELEASE_TYPE pyproject.toml
        NEW_VERSION=$(grep -o 'version = "[^"]*"' pyproject.toml | cut -d'"' -f2)
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        git add pyproject.toml
        git commit -m "Bump version to $NEW_VERSION"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
    - name: Push changes
      run: |
        git push origin main
        git push origin --tags
        
    - name: Generate changelog
      id: changelog
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG=$(git log --oneline --pretty=format:"* %s (%an)" HEAD)
        else
          CHANGELOG=$(git log --oneline --pretty=format:"* %s (%an)" $LAST_TAG..HEAD)
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
    - name: Create GitHub Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump.outputs.new-version }}
        release_name: Release v${{ steps.bump.outputs.new-version }}
        body: |
          ## What's Changed
          ${{ env.CHANGELOG }}
          
          ## Docker Images
          - `ghcr.io/${{ github.repository }}:${{ steps.bump.outputs.new-version }}`
          - `ghcr.io/${{ github.repository }}:latest`
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}..v${{ steps.bump.outputs.new-version }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: create-release
    if: success()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          ðŸŽ‰ New release created!
          Version: ${{ needs.create-release.outputs.new-version }}
          Release: ${{ needs.create-release.outputs.release-url }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Create GitHub Issue for Release Notes
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Update release notes for v${{ needs.create-release.outputs.new-version }}`,
            body: `Please update the release notes for version ${{ needs.create-release.outputs.new-version }}.
            
            Release URL: ${{ needs.create-release.outputs.release-url }}
            
            - [ ] Add detailed feature descriptions
            - [ ] Add migration notes if applicable
            - [ ] Update breaking changes section
            - [ ] Add acknowledgments`,
            labels: ['documentation', 'release']
          })
