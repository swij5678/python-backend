name: Release Management

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

jobs:
  check-changes:
    name: Check for Changes
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.changes.outputs.should-release }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check for significant changes
      id: changes
      run: |
        # Check if there are changes since the last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
        else
          CHANGES=$(git diff --name-only $LAST_TAG..HEAD | grep -v -E '^(README\.md|docs/|LICENSE|\.md$)' | wc -l)
          if [ $CHANGES -gt 0 ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: Set up Python
      if: steps.changes.outputs.should-release == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      if: steps.changes.outputs.should-release == 'true'
      run: |
        python -m pip install --upgrade pip
      
    - name: Get current version
      if: steps.changes.outputs.should-release == 'true'
      id: version
      run: |
        CURRENT_VERSION=$(grep -o 'version = "[^"]*"' pyproject.toml | cut -d'"' -f2)
        echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-release == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
      
    outputs:
      new-version: ${{ steps.bump.outputs.new-version }}
      release-url: ${{ steps.create-release.outputs.html_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Determine release type
      id: release-type
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
        else
          # Auto-determine release type based on commit messages
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            COMMITS=$(git log $LAST_TAG..HEAD --oneline)
            if echo "$COMMITS" | grep -i "BREAKING CHANGE\|breaking:" >/dev/null; then
              echo "type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -i "feat\|feature:" >/dev/null; then
              echo "type=minor" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi
        fi
        
    - name: Bump version
      id: bump
      run: |
        RELEASE_TYPE="${{ steps.release-type.outputs.type }}"
        CURRENT_VERSION=$(grep -o 'version = "[^"]*"' pyproject.toml | cut -d'"' -f2)
        
        # Use Python to handle version bumping more reliably
        python << EOF
import re
import sys

def bump_version(version, bump_type):
    parts = version.split('.')
    major, minor, patch = int(parts[0]), int(parts[1]), int(parts[2])
    
    if bump_type == 'major':
        major += 1
        minor = 0
        patch = 0
    elif bump_type == 'minor':
        minor += 1
        patch = 0
    else:  # patch
        patch += 1
    
    return f"{major}.{minor}.{patch}"

current_version = "$CURRENT_VERSION"
release_type = "$RELEASE_TYPE"
new_version = bump_version(current_version, release_type)

# Update pyproject.toml
with open('pyproject.toml', 'r') as f:
    content = f.read()

content = re.sub(r'version = "[^"]*"', f'version = "{new_version}"', content)

with open('pyproject.toml', 'w') as f:
    f.write(content)

print(f"Bumped version from {current_version} to {new_version}")
with open('$GITHUB_OUTPUT', 'a') as f:
    f.write(f"new-version={new_version}\n")
EOF
        
        NEW_VERSION=$(grep -o 'version = "[^"]*"' pyproject.toml | cut -d'"' -f2)
        git add pyproject.toml
        git commit -m "Bump version to $NEW_VERSION"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        
    - name: Push changes
      run: |
        git push origin master || git push origin main
        git push origin --tags
        
    - name: Generate changelog
      id: changelog
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG=$(git log --oneline --pretty=format:"* %s (%an)" HEAD)
        else
          CHANGELOG=$(git log --oneline --pretty=format:"* %s (%an)" $LAST_TAG..HEAD)
        fi
        
        # Use a delimiter to handle multiline content safely
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
    - name: Create GitHub Release
      id: create-release
      uses: actions/github-script@v6
      with:
        script: |
          const newVersion = '${{ steps.bump.outputs.new-version }}';
          const changelog = process.env.CHANGELOG || 'No changelog available';
          
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: `v${newVersion}`,
            name: `Release v${newVersion}`,
            body: `## What's Changed
${changelog}

## Docker Images
- \`ghcr.io/${{ github.repository }}:${newVersion}\`
- \`ghcr.io/${{ github.repository }}:latest\`

**Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}..v${newVersion}`,
            draft: false,
            prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          });
          
          core.setOutput('html_url', release.data.html_url);
          core.setOutput('upload_url', release.data.upload_url);
          return release.data.html_url;

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: create-release
    if: success()
    
    steps:
    - name: Notify Slack
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          ðŸŽ‰ New release created!
          Version: ${{ needs.create-release.outputs.new-version }}
          Release: ${{ needs.create-release.outputs.html_url }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Create GitHub Issue for Release Notes
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Update release notes for v${{ needs.create-release.outputs.new-version }}`,
            body: `Please update the release notes for version ${{ needs.create-release.outputs.new-version }}.
            
            Release URL: ${{ needs.create-release.outputs.html_url }}
            
            - [ ] Add detailed feature descriptions
            - [ ] Add migration notes if applicable
            - [ ] Update breaking changes section
            - [ ] Add acknowledgments`,
            labels: ['documentation', 'release']
          })
