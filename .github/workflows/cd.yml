name: CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.python-service.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
        # Add your staging deployment logic here
        # For example: kubectl, helm, docker-compose, etc.
        
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests against staging..."
        # Add smoke test commands here
        # curl -f https://staging.python-service.com/health
        
    - name: Notify Slack on staging deployment
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "‚úÖ Successfully deployed to staging!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://python-service.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Image: ${{ needs.build-and-push.outputs.image-tag }}"
        echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
        # Add your production deployment logic here
        
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests against production..."
        # Add smoke test commands here
        # curl -f https://python-service.com/health
        
    - name: Notify Slack on production deployment
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "üéâ Successfully deployed to production!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    
    steps:
    - name: Rollback staging
      if: needs.deploy-staging.result == 'failure'
      run: |
        echo "üîÑ Rolling back staging deployment..."
        # Add rollback logic for staging
        
    - name: Rollback production
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "üîÑ Rolling back production deployment..."
        # Add rollback logic for production
        
    - name: Notify on rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "‚ö†Ô∏è Deployment failed and rollback initiated!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-scan-image:
    name: Security Scan Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[docs]
        
    - name: Build documentation
      run: mkdocs build
      
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site
